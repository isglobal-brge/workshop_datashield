{
  "hash": "824864f4e45904a46f4e35dd6c0085d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DataSHIELD Workshop: Resources\"\nfreeze: true\nformat: \n  html:\n    code-copy: false\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n# Analysis using the `resources`\n\nFor more examples and detailed information about working with resources in DataSHIELD, please refer to the [Resources Workshop Repository](https://github.com/obiba/resources-workshop).\n\nNow, let us illustrate a similar analysis of the previous example using CNSIM datasets but having the data as a resource. Now the resources are available in a project called `RSRC` (see https://opal-demo.obiba.org/#/project/RSRC/resources). Now, we write all the require code in a single chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DSOpal)\nlibrary(dsBaseClient)\n\n# prepare login data and resources to assign\nbuilder <- DSI::newDSLoginBuilder()\nbuilder$append(server = \"study1\", url = \"https://opal-demo.obiba.org\", \n               user = \"dsuser\", password = \"P@ssw0rd\", \n               resource = \"RSRC.CNSIM1\", profile = \"default\")\n# builder$append(server = \"study2\", url = \"https://opal.isglobal.org/repo\",\n#                user = \"invited\",  password = \"12345678Aa@\",, \n#                resource = \"CNSIM.CNSIM2\", profile = \"rock-inma\")\n\nlogindata <- builder$build()\n\n# login and assign resources\nconns <- datashield.login(logins = logindata, assign = TRUE, symbol = \"res\")\n\n# assigned objects are of class ResourceClient (and others)\nds.class(\"res\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n[1] \"SQLResourceClient\" \"ResourceClient\"    \"R6\"               \n```\n\n\n:::\n\n```{.r .cell-code}\n# coerce ResourceClient objects to data.frames\n# (DataSHIELD config allows as.resource.data.frame() assignment function for the purpose of the demo)\ndatashield.assign.expr(conns, symbol = \"D\", \n                       expr = quote(as.resource.data.frame(res, strict = TRUE)))\nds.class(\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.colnames(\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n [1] \"id\"                 \"LAB_TSC\"            \"LAB_TRIG\"          \n [4] \"LAB_HDL\"            \"LAB_GLUC_ADJUSTED\"  \"PM_BMI_CONTINUOUS\" \n [7] \"DIS_CVA\"            \"MEDI_LPD\"           \"DIS_DIAB\"          \n[10] \"DIS_AMI\"            \"GENDER\"             \"PM_BMI_CATEGORICAL\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# do usual dsBase analysis\nds.summary('D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n$study1$class\n[1] \"numeric\"\n\n$study1$length\n[1] 2163\n\n$study1$`quantiles & mean`\n      5%      10%      25%      50%      75%      90%      95%     Mean \n0.875240 1.047400 1.300000 1.581000 1.844500 2.090000 2.210900 1.569416 \n```\n\n\n:::\n\n```{.r .cell-code}\n# vector types are not necessarily the same depending on the data reader that was used\nds.class('D$GENDER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.asFactor('D$GENDER', 'GENDER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$all.unique.levels\n[1] \"0\" \"1\"\n\n$return.message\n[1] \"Data object <GENDER> correctly created in all specified data sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.summary('GENDER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n$study1$class\n[1] \"factor\"\n\n$study1$length\n[1] 2163\n\n$study1$categories\n[1] \"0\" \"1\"\n\n$study1$`count of '0'`\n[1] 1092\n\n$study1$`count of '1'`\n[1] 1071\n```\n\n\n:::\n\n```{.r .cell-code}\nmod <- ds.glm(\"DIS_DIAB ~ LAB_TRIG + GENDER\", data = \"D\" , family=\"binomial\")\nmod$coeff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Estimate Std. Error    z-value      p-value low0.95CI.LP\n(Intercept) -5.1696619  0.4549328 -11.363572 6.349427e-30   -6.0613138\nLAB_TRIG     0.3813891  0.1037611   3.675647 2.372471e-04    0.1780211\nGENDER      -0.2260851  0.4375864  -0.516664 6.053908e-01   -1.0837387\n            high0.95CI.LP        P_OR low0.95CI.P_OR high0.95CI.P_OR\n(Intercept)    -4.2780099 0.005654338    0.002325913      0.01368049\nLAB_TRIG        0.5847570 1.464317247    1.194850574      1.79455494\nGENDER          0.6315685 0.797650197    0.338328242      1.88055787\n```\n\n\n:::\n\n```{.r .cell-code}\ndatashield.logout(conns)\n```\n:::\n\n\n# Survival analysis\n\nSurvival analysis can be performed in DataSHIELD using `dsSurvival` package \n(paper [https://bmcresnotes.biomedcentral.com/articles/10.1186/s13104-022-06085-1](https://bmcresnotes.biomedcentral.com/articles/10.1186/s13104-022-06085-1))\n\nInstall the package which allows you to perform survival analysis in DataSHIELD\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"neelsoumya/dsSurvivalClient\")\n```\n:::\n\n\nLogin to the Opal server which is having CORDELIA data. \nIMPORTANT: In order to have an Opal instance with dsSurvival package available, \nuse the profile \"lemon-donkey\"\n\nNow, read how to perform surival analysis using DataSHIELD in this vignette\n\n[https://neelsoumya.github.io/dsSurvivalbookdown/](https://neelsoumya.github.io/dsSurvivalbookdown/)\n  \nTASK: Perform survival analysis of CORDELIA dataset where the time until death \nis in the variable called \"todeath\" and censoring variable is in the variable \n\"death\" to investigate whether smoking (variable \"fumador\") is associated or not\nwith mortality after adjusting for age (variable \"edad\")\nNOTE: follow all steps in the vignette.\n\n# Omic data analysis\n\nPlease refer to the [Omic data analysis resource](https://isglobal-brge.github.io/resource_bookdown/Omic.html).\n\n# Exercise: CORDELIA Project Analysis\n\nWe have a database from the CORDELIA Project (https://cordeliaproject.net/), which collects clinical, demographic, and laboratory information about participants in order to study cardiovascular and metabolic risk factors. The dataset contains the following variables:\n\n- **cohorte** – Cohort (study group the subject belongs to)\n- **codigo** – Code / ID (unique identifier for each subject)\n- **fec_inc** – Date of inclusion (enrollment date in the study)\n- **edad** – Age\n- **sexo** – Sex (male/female)\n- **est_civ** – Marital status\n- **niv_cult** – Educational level\n- **act_fis** – Physical activity\n- **fumador** – Smoker (yes/no)\n- **HTA** – Hypertension (diagnosis)\n- **HTA_TTO** – Hypertension treatment (yes/no)\n- **hipercol** – Hypercholesterolemia (diagnosis)\n- **col_tto** – Cholesterol treatment (yes/no)\n- **diabetes** – Diabetes (diagnosis)\n- **diab_tto** – Diabetes treatment (yes/no)\n- **insulin** – Insulin treatment (yes/no)\n- **diab_ado_ins** – Diabetes treated with oral antidiabetics and insulin\n- **peso** – Weight (kg)\n- **talla** – Height (cm or m)\n- **cintura** – Waist circumference (cm)\n- **IMC** – Body Mass Index (BMI)\n- **FC** – Heart rate (beats per minute)\n- **PAS_1** – Systolic blood pressure (1st measurement)\n- **PAS_2** – Systolic blood pressure (2nd measurement)\n- **PAD_1** – Diastolic blood pressure (1st measurement)\n- **PAD_2** – Diastolic blood pressure (2nd measurement)\n- **col_tot** – Total cholesterol\n- **hdl** – HDL cholesterol\n- **ldl** – LDL cholesterol\n- **trig** – Triglycerides\n- **creat** – Creatinine\n- **filt_glomer** – Glomerular filtration rate (GFR)\n- **glu** – Blood glucose\n- **exitusSeg** – Death during follow-up (yes/no)\n- **FechaExit_Seg** – Date of death during follow-up\n- **filt_glomer_CKD** – Glomerular filtration rate classified for chronic kidney disease (CKD stages)\n- **HTA_tot** – Hypertension (overall variable, combining diagnosis/treatment)\n- **diabetes_tot** – Diabetes (overall variable, combining diagnosis/treatment)\n- **todeath** – Time to death (follow-up time until death)\n- **death** – Death (event indicator, yes/no)\n\nThe data is stored on an Opal server within a project named `CORDELIA`, under the resource `cordelia45`, with access credentials provided as follows:\n\n- Server: \"https://opal-demo.obiba.org\"\n- User: \"dsuser\"\n- Password: \"P@ssw0rd\"\n\n## Tasks\n\nComplete the following tasks:\n\n1. Load the data into a DataSHIELD session\n2. Summarize the variable `IMC`\n3. Create a histogram of the variable `trig`\n4. Assess whether `diabetes` is associated with `hipercol`, `IMC`, `hdl` and `col_tot` in separate univariate models\n5. Estimate a multivariate model for the variable `diabetes`, including only those variables that were significant in the univariate models\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}