{
  "hash": "4485d0cbb326ae21657d7db230fc1b33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DataSHIELD Workshop: Tables\"\nfreeze: true\nformat: \n  html:\n    code-copy: false\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  message: false\n  error: true\n---\n\n<a href=\"https://github.com/isglobal-brge/workshop_datashield/raw/main/datashield_tables.R\" class=\"btn btn-primary btn-sm\" download>\n<i class=\"bi bi-download\"></i> Download R Script\n</a>\n\n### INFORMATION FOR NEWCOMERS TO RSTUDIO NOTEBOOKS: \n\nThis is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code. \n\nTry executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*. \n\n# DataSHIELD for analyzing simulated D data\n\nThe plan for this workshop is as follows:\n\n- Installing DataSHIELD\n- Logging in and assigning data\n- Describing data\n- Manipulating data\n- Subsetting data\n- Data manipulation with dsHelper\n- Making graphs\n- Performing regression analysis\n\n\n## Installing DataSHIELD\n\nFirstly: check whether we have the right R packages installed to run DataSHIELD: using the very helpful devtools package (which has already been installed for us by Stuart!), we'll use the \"Session info\" command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\nlibrary(devtools)\ndevtools::session_info()\n```\n:::\n\n\nWe are missing some of the necessary packages: \"DSI\", \"DSOpal\" and \"dsBaseClient\". \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('DSI')\ninstall.packages('DSOpal')\ndevtools::install_github(\"datashield/dsBaseClient\", force = TRUE)\ndevtools::install_github(\"timcadman/ds-helper\")\ninstall.packages(\"metafor\")\n```\n:::\n\n\n\nRemember to load them into this R session using \"library()\" command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# libraries to connect with Opal databases\nlibrary(DSI)\nlibrary(DSOpal)\n\n# DataSHIELD client libraries\nlibrary(dsBaseClient)\nlibrary(dsHelper)\n\n# Library to perform meta-analyses\nlibrary(metafor)\n```\n:::\n\n\nCheck that they have now been added:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Session info ---------------------------------------------------------------\n setting  value\n version  R version 4.4.2 (2024-10-31)\n os       macOS Sequoia 15.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  C\n ctype    C\n tz       Europe/Madrid\n date     2025-10-06\n pandoc   3.6.3 @ /opt/homebrew/bin/ (via rmarkdown)\n quarto   1.7.31 @ /usr/local/bin/quarto\n\n- Packages -------------------------------------------------------------------\n package      * version    date (UTC) lib source\n arrow          20.0.0.2   2025-05-26 [1] CRAN (R 4.4.1)\n assertthat     0.2.1      2019-03-21 [1] CRAN (R 4.4.1)\n backports      1.5.0      2024-05-23 [1] CRAN (R 4.4.1)\n bit            4.6.0      2025-03-06 [1] CRAN (R 4.4.1)\n bit64          4.6.0-1    2025-01-16 [1] CRAN (R 4.4.1)\n boot           1.3-31     2024-08-28 [1] CRAN (R 4.4.2)\n cachem         1.1.0      2024-05-16 [1] CRAN (R 4.4.1)\n checkmate      2.3.2      2024-07-29 [1] CRAN (R 4.4.0)\n cli            3.6.5      2025-04-23 [1] CRAN (R 4.4.1)\n crayon         1.5.3      2024-06-20 [1] CRAN (R 4.4.1)\n data.table     1.17.8     2025-07-10 [1] CRAN (R 4.4.1)\n devtools       2.4.5      2022-10-11 [1] CRAN (R 4.4.0)\n digest         0.6.37     2024-08-19 [1] CRAN (R 4.4.1)\n dplyr          1.1.4      2023-11-17 [1] CRAN (R 4.4.0)\n dsBaseClient * 6.3.4      2025-09-25 [1] Github (datashield/dsBaseClient@8b9557f)\n dsHelper     * 1.7.1      2025-07-03 [1] Github (timcadman/ds-helper@1b2348d)\n DSI          * 1.7.1      2024-11-03 [1] CRAN (R 4.4.1)\n DSOpal       * 1.4.0      2022-10-06 [1] CRAN (R 4.4.0)\n ellipsis       0.3.2      2021-04-29 [1] CRAN (R 4.4.1)\n evaluate       1.0.3      2025-01-10 [1] CRAN (R 4.4.1)\n fastmap        1.2.0      2024-05-15 [1] CRAN (R 4.4.1)\n forcats        1.0.0      2023-01-29 [1] CRAN (R 4.4.0)\n fs             1.6.5      2024-10-30 [1] CRAN (R 4.4.1)\n generics       0.1.4      2025-05-09 [1] CRAN (R 4.4.1)\n glue           1.8.0      2024-09-30 [1] CRAN (R 4.4.1)\n haven          2.5.4      2023-11-30 [1] CRAN (R 4.4.0)\n hms            1.1.3      2023-03-21 [1] CRAN (R 4.4.0)\n htmltools      0.5.8.1    2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets    1.6.4      2023-12-06 [1] CRAN (R 4.4.0)\n httpuv         1.6.15     2024-03-26 [1] CRAN (R 4.4.0)\n httr         * 1.4.7      2023-08-15 [1] CRAN (R 4.4.0)\n jsonlite       2.0.0      2025-03-27 [1] CRAN (R 4.4.1)\n knitr          1.49       2024-11-08 [1] CRAN (R 4.4.1)\n labelled       2.14.0     2025-01-08 [1] CRAN (R 4.4.1)\n later          1.4.1      2024-11-27 [1] CRAN (R 4.4.1)\n lattice        0.22-6     2024-03-20 [1] CRAN (R 4.4.2)\n lifecycle      1.0.4      2023-11-07 [1] CRAN (R 4.4.1)\n lme4           1.1-37     2025-03-26 [1] CRAN (R 4.4.1)\n magrittr       2.0.4      2025-09-12 [1] CRAN (R 4.4.1)\n MASS           7.3-61     2024-06-13 [1] CRAN (R 4.4.2)\n mathjaxr       1.8-0      2025-04-30 [1] CRAN (R 4.4.1)\n Matrix       * 1.7-1      2024-10-18 [1] CRAN (R 4.4.2)\n memoise        2.0.1      2021-11-26 [1] CRAN (R 4.4.0)\n metadat      * 1.4-0      2025-02-04 [1] CRAN (R 4.4.1)\n metafor      * 4.8-0      2025-01-28 [1] CRAN (R 4.4.1)\n mime           0.13       2025-03-17 [1] CRAN (R 4.4.1)\n miniUI         0.1.1.1    2018-05-18 [1] CRAN (R 4.4.0)\n minqa          1.2.8      2024-08-17 [1] CRAN (R 4.4.1)\n nlme           3.1-166    2024-08-14 [1] CRAN (R 4.4.2)\n nloptr         2.2.1      2025-03-17 [1] CRAN (R 4.4.1)\n numDeriv     * 2016.8-1.1 2019-06-06 [1] CRAN (R 4.4.1)\n opalr        * 3.4.2      2024-09-18 [1] CRAN (R 4.4.1)\n pillar         1.11.1     2025-09-17 [1] CRAN (R 4.4.1)\n pkgbuild       1.4.6      2025-01-16 [1] CRAN (R 4.4.1)\n pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 4.4.1)\n pkgload        1.4.0      2024-06-28 [1] CRAN (R 4.4.0)\n prettyunits    1.2.0      2023-09-24 [1] CRAN (R 4.4.1)\n profvis        0.4.0      2024-09-20 [1] CRAN (R 4.4.1)\n progress     * 1.2.3      2023-12-06 [1] CRAN (R 4.4.0)\n promises       1.3.2      2024-11-28 [1] CRAN (R 4.4.1)\n purrr          1.1.0      2025-07-10 [1] CRAN (R 4.4.1)\n R6           * 2.6.1      2025-02-15 [1] CRAN (R 4.4.1)\n rbibutils      2.3        2024-10-04 [1] CRAN (R 4.4.1)\n Rcpp           1.1.0      2025-07-02 [1] CRAN (R 4.4.1)\n Rdpack         2.6.4      2025-04-09 [1] CRAN (R 4.4.1)\n readr          2.1.5      2024-01-10 [1] CRAN (R 4.4.0)\n reformulas     0.4.1      2025-04-30 [1] CRAN (R 4.4.1)\n remotes        2.5.0      2024-03-17 [1] CRAN (R 4.4.1)\n rlang          1.1.6      2025-04-11 [1] CRAN (R 4.4.1)\n rmarkdown      2.29       2024-11-04 [1] CRAN (R 4.4.1)\n sessioninfo    1.2.3      2025-02-05 [1] CRAN (R 4.4.1)\n shiny          1.10.0     2024-12-14 [1] CRAN (R 4.4.1)\n stringi        1.8.7      2025-03-27 [1] CRAN (R 4.4.1)\n stringr        1.5.2      2025-09-08 [1] CRAN (R 4.4.1)\n tibble         3.3.0      2025-06-08 [1] CRAN (R 4.4.1)\n tidyr          1.3.1      2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect     1.2.1      2024-03-11 [1] CRAN (R 4.4.0)\n tzdb           0.5.0      2025-03-15 [1] CRAN (R 4.4.1)\n urlchecker     1.0.1      2021-11-30 [1] CRAN (R 4.4.1)\n usethis        3.1.0      2024-11-26 [1] CRAN (R 4.4.1)\n vctrs          0.6.5      2023-12-01 [1] CRAN (R 4.4.0)\n xfun           0.50       2025-01-07 [1] CRAN (R 4.4.1)\n xtable         1.8-4      2019-04-21 [1] CRAN (R 4.4.1)\n yaml           2.3.10     2024-07-26 [1] CRAN (R 4.4.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n * -- Packages attached to the search path.\n\n------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n## Logging in and assigning data\n\nThe login script has to be customized to fit the data you are trying to connect to.\n\nThe \"builder <-\" and \"builder$append\" functions are standard features.\n\nFor this demonstration we are connecting to simulated data- but if it was data of real people, it would be very important for us not to be able to see individual patients' information.\n\n\nFor this workshop, we'll imagine that the data is hosted in a two Opal repositories located in France and Spain. The tables are in a project called CNSIM and the tables are named CNSIM1 and CNSIM2 respectively. Data correspond to two simulated datasets with different numbers of observations of 11 harmonized variables. They contain synthetic data based on a model derived from the participants of the 1958 Birth Cohort, as part of an obesity methodological development project. This dataset does contain some NA values. The available variables are:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Variable           | Description                                                                | Type   | Note                                                                                            |\n|:------------------|:---------------------------------------------------------------------------|:-------|:------------------------------------------------------------------------------------------------|\n|LAB_TSC            |Total Serum Cholesterol                                                     |numeric |mmol/L                                                                                           |\n|LAB_TRIG           |Triglycerides                                                               |numeric |mmol/L                                                                                           |\n|LAB_HDL            |HDL Cholesterol                                                             |numeric |mmol/L                                                                                           |\n|LAB_GLUC_ADJUSTED  |Non-Fasting Glucose                                                         |numeric |mmol/L                                                                                           |\n|PM_BMI_CONTINUOUS  |Body Mass Index (continuous)                                                |numeric |kg/m2                                                                                            |\n|DIS_CVA            |History of Stroke                                                           |factor  |0 = Never had stroke; 1 = Has had stroke                                                         |\n|MEDI_LPD           |Current Use of Lipid Lowering Medication (from categorical assessment item) |factor  |0 = Not currently using lipid lowering medication; 1 = Currently using lipid lowering medication |\n|DIS_DIAB           |History of Diabetes                                                         |factor  |0 = Never had diabetes; 1 = Has had diabetes                                                     |\n|DIS_AMI            |History of Myocardial Infarction                                            |factor  |0 = Never had myocardial infarction; 1 = Has had myocardial infarction                           |\n|GENDER             |Gender                                                                      |factor  |0 = Female, 1 = Male                                                                             |\n|PM_BMI_CATEGORICAL |Body Mass Index (categorical)                                               |factor  |1 = Less than 25 kg/m2; 2 = 25 to 30 kg/m2; 3 = Over 30 kg/m2                                    |\n\n\n:::\n:::\n\n\n\nNow, using DataSHIELD, we have to connect to the servers which contains the data in the Opal databases. \nThe below code creates a local R object with the login details for each study:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuilder <- DSI::newDSLoginBuilder()\n\n# Server 1: France \nbuilder$append(\n  server = 'France', \n  url = \"https://opal-demo.obiba.org\",\n  user = \"administrator\", \n  password = \"password\",\n  table = \"CNSIM.CNSIM1\",\n  profile = \"default\"\n)\n\n# Server 2: Spain (ISGlobal)\nbuilder$append(\n  server = 'ISGlobal', \n  url = \"https://opal.isglobal.org/repo\",\n  user = \"invited\", \n  password = \"12345678Aa@\",\n  table = \"CNSIM.CNSIM2\",\n  profile = \"rock-inma\"\n)\n```\n:::\n\n\nNOTE: The `profile` argument is set up by the data owners and controls both, the datasets or projects that are available for this user, as well as the different DataSHIELD packages.\n\n\nNow we need to connect, referring to the login information in the data frame we have just created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogindata <- builder$build()\nconns <- datashield.login(logins = logindata, assign = TRUE)\n```\n:::\n\n\nThe 'assign' argument can be set to either 'TRUE' or 'FALSE'. If set to 'TRUE', all the available variables within that table will be assigned to a serverside data frame and available to access. If you only need a small subset of available variables it can be preferable to set this to 'FALSE' and later use the function 'datashield.assign' to separately assign only the variables you need. The output of this box has useful progress bars which show the progress of connecting to studies, one by one. \n\n\n\nWe can see the serverside has object called `D` which correspond to the dataset `CNSIM` of each study by running:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.ls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"D\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"D\"\n```\n\n\n:::\n:::\n\n\n\nwhich is a data.frame called `D` (this name was set using the 'symbol' argument in datashield.login above). We can check that this is a data.frame by typing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.class(x = \"D\", datasources = conns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n[1] \"data.frame\"\n\n$ISGlobal\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\nNOTE: writting `datasources = conns` is not required. This is just to emphasize that if you have several connections you need to specify which one is yours. By default, it missing it looks for your local environment. Also, the argument `x = \"D\"` can be simply written by `\"D\"`.  \n\n\nand the data.frame has the variables we have previously described\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.colnames(\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n [1] \"LAB_TSC\"            \"LAB_TRIG\"           \"LAB_HDL\"           \n [4] \"LAB_GLUC_ADJUSTED\"  \"PM_BMI_CONTINUOUS\"  \"DIS_CVA\"           \n [7] \"MEDI_LPD\"           \"DIS_DIAB\"           \"DIS_AMI\"           \n[10] \"GENDER\"             \"PM_BMI_CATEGORICAL\"\n\n$ISGlobal\n [1] \"DIS_AMI\"            \"DIS_CVA\"            \"DIS_DIAB\"          \n [4] \"GENDER\"             \"LAB_GLUC_ADJUSTED\"  \"LAB_HDL\"           \n [7] \"LAB_TRIG\"           \"LAB_TSC\"            \"MEDI_LPD\"          \n[10] \"PM_BMI_CATEGORICAL\" \"PM_BMI_CONTINUOUS\" \n```\n\n\n:::\n:::\n\n\n################################################################################\n\n## Describing data ('aggregate-type functions')\n\nThere are many data exploration functions already implemented into DataSHIELD: let's check it out at the wiki [https://data2knowledge.atlassian.net/wiki/spaces/DSDEV/pages/2733244417/Version+6.2.0](https://data2knowledge.atlassian.net/wiki/spaces/DSDEV/pages/2733244417/Version+6.2.0)\n\nScroll down to \"Data structure queries\". Let's try out a few of these:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.dim(x=\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`dimensions of D in France`\n[1] 2163   11\n\n$`dimensions of D in ISGlobal`\n[1] 3088   11\n\n$`dimensions of D in combined studies`\n[1] 5251   11\n```\n\n\n:::\n:::\n\n\nWhat it is *mandatory* is to write the name of the data.frame with \"\".  \n\n### We're going to be focus on HDL \n\nThis is a measure of HDL Cholesterol (aka the \"good cholesterol\" level)\n\nLet's run some summary statistic commands\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.class(x='D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n[1] \"numeric\"\n\n$ISGlobal\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.length(x='D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`length of D$LAB_HDL in France`\n[1] 2163\n\n$`length of D$LAB_HDL in ISGlobal`\n[1] 3088\n\n$`total length of D$LAB_HDL in all studies combined`\n[1] 5251\n```\n\n\n:::\n\n```{.r .cell-code}\nds.mean(x='D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        1.569416      360   1803   2163\nISGlobal      1.556648      555   2533   3088\n\n$Nstudies\n[1] 2\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\n```\n\n\n:::\n:::\n\n\nWhat is this other function to obtain the mean? Let's use the DataSHIELD function help documentation.\n\n::: {.cell}\n\n```{.r .cell-code}\n?ds.quantileMean\n```\n:::\n\n\nNow, putting into action some of what we've learned about the function arguments. NOTE: 'split' is in case you have data from different servers and you want to see the statistic one by one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.quantileMean(x='D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       5%       10%       25%       50%       75%       90%       95%      Mean \n0.8606589 1.0385205 1.2964949 1.5704848 1.8418712 2.0824057 2.2191369 1.5619572 \n```\n\n\n:::\n\n```{.r .cell-code}\nds.quantileMean(x='D$LAB_HDL', type = \"split\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n      5%      10%      25%      50%      75%      90%      95%     Mean \n0.875240 1.047400 1.300000 1.581000 1.844500 2.090000 2.210900 1.569416 \n\n$ISGlobal\n      5%      10%      25%      50%      75%      90%      95%     Mean \n0.850280 1.032200 1.294000 1.563000 1.840000 2.077000 2.225000 1.556648 \n```\n\n\n:::\n:::\n\n\nTrying to calculate the variance of FEV1:\n\n::: {.cell}\n\n```{.r .cell-code}\n?ds.var\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.var(x = 'D$LAB_HDL', type = \"split\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Variance.by.Study\n         EstimatedVar Nmissing Nvalid Ntotal\nFrance      0.1707959      360   1803   2163\nISGlobal    0.1786661      555   2533   3088\n\n$Nstudies\n[1] 2\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\n```\n\n\n:::\n:::\n\n\nCan we store the results calculated from a DataSHIELD analysis in a local R session?\n\nYes- the output of aggregate functions are always R objects, hence can be stored.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-ds.var(x = 'D$LAB_HDL', type = \"split\")[[1]]\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         EstimatedVar Nmissing Nvalid Ntotal\nFrance      0.1707959      360   1803   2163\nISGlobal    0.1786661      555   2533   3088\n```\n\n\n:::\n\n```{.r .cell-code}\nb<-ds.var(x = 'D$LAB_HDL', type = \"split\")[[1]][[1,1]]\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1707959\n```\n\n\n:::\n:::\n\n\nThe square brackets are because we are trying to access an element of a list- which is the R object that DataSHIELD aggregate functions output as.\n\nFactor variables visualize by simply writing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.table(\"D$GENDER\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Data in all studies were valid \n\nStudy 1 :  No errors reported from this study\nStudy 2 :  No errors reported from this study\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$output.list\n$output.list$TABLE_rvar.by.study_row.props\n        study\nD$GENDER    France  ISGlobal\n      0  0.4079193 0.5920807\n      1  0.4160839 0.5839161\n      NA       NaN       NaN\n\n$output.list$TABLE_rvar.by.study_col.props\n        study\nD$GENDER    France  ISGlobal\n      0  0.5048544 0.5132772\n      1  0.4951456 0.4867228\n      NA 0.0000000 0.0000000\n\n$output.list$TABLE_rvar.by.study_counts\n        study\nD$GENDER France ISGlobal\n      0    1092     1585\n      1    1071     1503\n      NA      0        0\n\n$output.list$TABLES.COMBINED_all.sources_proportions\nD$GENDER\n   0    1   NA \n0.51 0.49 0.00 \n\n$output.list$TABLES.COMBINED_all.sources_counts\nD$GENDER\n   0    1   NA \n2677 2574    0 \n\n\n$validity.message\n[1] \"Data in all studies were valid\"\n```\n\n\n:::\n:::\n\n\n### Using dsHelper to retrieve statistics in a neater format. \n\nAs you may have noticed, some operations which are more straightforward in R can be more complicated in datashield. To help with this, the dsHelper package allows you to do some common operations in fewer lines of code. DsHelper is an entirely serverside package - it contains only clientside functions which call DataSHIELD functions serverside. \n\nWe have seen datashield has a range of functions to retrieve statistics, but is limited in that (i) you need to use different functions for different statistics, (ii) you can only get stats for one variable at a time. dh.GetStats returns many useful stats in a tibble, and allows you to retrieve stats for multiple variables at a time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneat_stats <- dh.getStats(\n\tdf = \"D\",\n  vars = c(\"GENDER\", \"LAB_TRIG\", \"LAB_HDL\", \"DIS_CVA\", \"DIS_DIAB\"))\n           \nneat_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$categorical\n# A tibble: 27 x 10\n   variable cohort   category value cohort_n valid_n missing_n perc_valid\n   <chr>    <chr>    <fct>    <int>    <int>   <int>     <int>      <dbl>\n 1 DIS_CVA  combined 0         5248     5251    5251         0      99.9 \n 2 DIS_CVA  combined 1            3     5251    5251         0       0.06\n 3 DIS_CVA  combined <NA>         0     5251      NA        NA      NA   \n 4 DIS_DIAB combined 0         5174     5251    5251         0      98.5 \n 5 DIS_DIAB combined 1           77     5251    5251         0       1.47\n 6 DIS_DIAB combined <NA>         0     5251      NA        NA      NA   \n 7 GENDER   combined 0         2677     5251    5251         0      51.0 \n 8 GENDER   combined 1         2574     5251    5251         0      49.0 \n 9 GENDER   combined <NA>         0     5251      NA        NA      NA   \n10 DIS_CVA  France   0         2163     2163    2163         0     100   \n# i 17 more rows\n# i 2 more variables: perc_missing <dbl>, perc_total <dbl>\n\n$continuous\n# A tibble: 6 x 15\n  variable cohort    mean std.dev perc_5 perc_10 perc_25 perc_50 perc_75 perc_90\n  <chr>    <chr>    <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 LAB_HDL  France    1.57    0.41   0.88    1.05    1.3     1.58    1.84    2.09\n2 LAB_HDL  ISGlobal  1.56    0.42   0.85    1.03    1.29    1.56    1.84    2.08\n3 LAB_TRIG France    2.1     1.58  -0.36    0.17    1.04    2.11    3.12    4.07\n4 LAB_TRIG ISGlobal  2.05    1.58  -0.55    0.01    1       2.05    3.06    4.03\n5 LAB_HDL  combined  1.56    0.42   0.86    1.04    1.3     1.57    1.84    2.08\n6 LAB_TRIG combined  2.07    1.58  -0.47    0.08    1.02    2.08    3.09    4.05\n# i 5 more variables: perc_95 <dbl>, valid_n <dbl>, cohort_n <dbl>,\n#   missing_n <dbl>, missing_perc <dbl>\n```\n\n\n:::\n:::\n\n\n\n################################################################################\n\n## Manipulating data ('assign-type' functions)\n\nAssign-type functions are ones where a calculation is done on the data stored at the server (and results of that calculation are \"assigned\" to a serverside variable, and saved there), but is NOT transmitted back to the user.\n\nThe reason for this is that some calculations could be highly disclosive- and if such data were transmitted to the analyst, with not much effort at all, with an inverse function, the analyst could work out exactly what the raw data are- and thus the data's privacy is broken!\n\nTo demonstrate: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.ls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"D\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"D\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.log(x='D$LAB_HDL', newobj='HDL_log')\nds.ls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"D\"       \"HDL_log\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"D\"       \"HDL_log\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.mean(x=\"HDL_log\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance       0.4086112      361   1802   2163\nISGlobal     0.3971793      558   2530   3088\n\n$Nstudies\n[1] 2\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.mean(x=\"D$LAB_HDL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        1.569416      360   1803   2163\nISGlobal      1.556648      555   2533   3088\n\n$Nstudies\n[1] 2\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\n```\n\n\n:::\n:::\n\nThe second \"ds.mean\" shows that the mean of the logged values are definitely smaller, by about the right amount. The DataSHIELD log function has worked.\n\nThere is another DataSHIELD assign function that can be used for data transformations - a square root function. Let's test again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.sqrt(x='D$LAB_HDL', newobj='HDL_sqrt')\nds.ls()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$environment.searched\n[1] \"R_GlobalEnv\"\n\n$France$objects.found\n[1] \"D\"        \"HDL_log\"  \"HDL_sqrt\"\n\n\n$ISGlobal\n$ISGlobal$environment.searched\n[1] \"R_GlobalEnv\"\n\n$ISGlobal$objects.found\n[1] \"D\"        \"HDL_log\"  \"HDL_sqrt\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.mean(x=\"HDL_sqrt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        1.240844      361   1802   2163\nISGlobal      1.235489      558   2530   3088\n\n$Nstudies\n[1] 2\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.mean(x=\"D$LAB_HDL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Mean.by.Study\n         EstimatedMean Nmissing Nvalid Ntotal\nFrance        1.569416      360   1803   2163\nISGlobal      1.556648      555   2533   3088\n\n$Nstudies\n[1] 2\n\n$ValidityMessage\n         ValidityMessage \nFrance   \"VALID ANALYSIS\"\nISGlobal \"VALID ANALYSIS\"\n```\n\n\n:::\n:::\n\n\nThese new objects are not attached to a dataframe. \nUse the help function to find out about the ds.dataFrame function, which can be used to combine objects.\n\nNow join \"HDL_sqrt\" and \"HDL_log\" to the dataframe \"D\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.dataFrame(c(\"D\", \"HDL_sqrt\", \"HDL_log\"), newobj = \"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <D> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<D> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.colnames(\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n [1] \"LAB_TSC\"            \"LAB_TRIG\"           \"LAB_HDL\"           \n [4] \"LAB_GLUC_ADJUSTED\"  \"PM_BMI_CONTINUOUS\"  \"DIS_CVA\"           \n [7] \"MEDI_LPD\"           \"DIS_DIAB\"           \"DIS_AMI\"           \n[10] \"GENDER\"             \"PM_BMI_CATEGORICAL\" \"HDL_sqrt\"          \n[13] \"HDL_log\"           \n\n$ISGlobal\n [1] \"DIS_AMI\"            \"DIS_CVA\"            \"DIS_DIAB\"          \n [4] \"GENDER\"             \"LAB_GLUC_ADJUSTED\"  \"LAB_HDL\"           \n [7] \"LAB_TRIG\"           \"LAB_TSC\"            \"MEDI_LPD\"          \n[10] \"PM_BMI_CATEGORICAL\" \"PM_BMI_CONTINUOUS\"  \"HDL_sqrt\"          \n[13] \"HDL_log\"           \n```\n\n\n:::\n:::\n\n\n**EXERCISE: Using some of the functions above, explore the distribution of the variable \"PM_BMI_CATEGORICAL\" in dataframe \"D\".**\n\n\nHere you see this has returned a list of two tibbles separated into continuous and categorical information. For the categorical variables info is returned on ns, percentages and missingness within each category, whilst for continuous variables info is returned on mean, standard deviation, quantiles and also missingness.\n\n\n## Sub-setting data\n\nIn DataSHIELD there is one function that allows sub-setting of data, ds.dataFrameSubset .\n\nYou may wish to use it to:\n\nSubset a column of data by its \"Class\"\nSubset a dataframe to remove any \"NA\"s\nSubset a numeric column of a dataframe using a Boolean inequalilty\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first find the column name you wish to refer to\nds.colnames(x=\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n [1] \"LAB_TSC\"            \"LAB_TRIG\"           \"LAB_HDL\"           \n [4] \"LAB_GLUC_ADJUSTED\"  \"PM_BMI_CONTINUOUS\"  \"DIS_CVA\"           \n [7] \"MEDI_LPD\"           \"DIS_DIAB\"           \"DIS_AMI\"           \n[10] \"GENDER\"             \"PM_BMI_CATEGORICAL\" \"HDL_sqrt\"          \n[13] \"HDL_log\"           \n\n$ISGlobal\n [1] \"DIS_AMI\"            \"DIS_CVA\"            \"DIS_DIAB\"          \n [4] \"GENDER\"             \"LAB_GLUC_ADJUSTED\"  \"LAB_HDL\"           \n [7] \"LAB_TRIG\"           \"LAB_TSC\"            \"MEDI_LPD\"          \n[10] \"PM_BMI_CATEGORICAL\" \"PM_BMI_CONTINUOUS\"  \"HDL_sqrt\"          \n[13] \"HDL_log\"           \n```\n\n\n:::\n\n```{.r .cell-code}\n# then check which levels you need to apply a boolean operator to:\nds.levels(x=\"D$GENDER\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$Levels\n[1] \"0\" \"1\"\n\n$France$ValidityMessage\n[1] \"VALID ANALYSIS\"\n\n\n$ISGlobal\n$ISGlobal$Levels\n[1] \"0\" \"1\"\n\n$ISGlobal$ValidityMessage\n[1] \"VALID ANALYSIS\"\n```\n\n\n:::\n\n```{.r .cell-code}\n?ds.dataFrameSubset\n```\n:::\n\n\nSplitting into GENDER groups, assigned to different server-side objects.\n\n::: {.cell}\n\n```{.r .cell-code}\nds.dataFrameSubset(df.name = \"D\", V1.name = \"D$GENDER\", V2.name = \"1\", \n                   Boolean.operator = \"==\", newobj = \"CNSIM.subset.Males\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <CNSIM.subset.Males> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<CNSIM.subset.Males> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.dataFrameSubset(df.name = \"D\", V1.name = \"D$GENDER\", V2.name = \"0\", \n                   Boolean.operator = \"==\", newobj = \"CNSIM.subset.Females\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <CNSIM.subset.Females> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<CNSIM.subset.Females> appears valid in all sources\"\n```\n\n\n:::\n:::\n\nNow there are two serverside objects which have split GENDER by class, to which we have assigned the names \"CNSIM.subset.Males\" and \"CNSIM.subset.Females\".\n\n\n### Sub-setting to remove NAs\n\n::: {.cell}\n\n```{.r .cell-code}\nds.completeCases(x1=\"D\",newobj=\"D_without_NA\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <D_without_NA> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<D_without_NA> appears valid in all sources\"\n```\n\n\n:::\n:::\n\n\n### Sub-setting by inequality\nSay we wanted to have a subset of patients where BMI values are ≥ 25, and call it subset.BMI.25.plus\n\n::: {.cell}\n\n```{.r .cell-code}\nds.dataFrameSubset(df.name = \"D\",\n  V1.name = \"D$PM_BMI_CONTINUOUS\",\n  V2.name = \"25\",\n  Boolean.operator = \">=\",\n  newobj = \"subset.BMI.25.plus\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <subset.BMI.25.plus> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<subset.BMI.25.plus> appears valid in all sources\"\n```\n\n\n:::\n:::\n\n\nChecking we have successfully created such an object, using quantiles and histograms:\n\n::: {.cell}\n\n```{.r .cell-code}\nds.quantileMean(x=\"subset.BMI.25.plus$PM_BMI_CONTINUOUS\", type = \"split\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n     5%     10%     25%     50%     75%     90%     95%    Mean \n25.3500 25.7100 27.1500 29.2000 32.0600 34.6560 36.4980 29.9019 \n\n$ISGlobal\n      5%      10%      25%      50%      75%      90%      95%     Mean \n25.46900 25.91800 27.19000 29.27000 32.20500 34.76200 36.24300 29.92606 \n```\n\n\n:::\n\n```{.r .cell-code}\nds.histogram(x=\"subset.BMI.25.plus$PM_BMI_CONTINUOUS\")\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n$breaks\n [1] 23.84007 27.03783 30.23559 33.43335 36.63111 39.82887 43.02664 46.22440\n [9] 49.42216 52.61992 55.81768\n\n$counts\n [1] 343 506 345 161  49  17   0   0   0   0\n\n$density\n [1] 0.07527195 0.11104259 0.07571086 0.03533173 0.01075314 0.00373068\n [7] 0.00000000 0.00000000 0.00000000 0.00000000\n\n$mids\n [1] 25.43895 28.63671 31.83447 35.03223 38.22999 41.42775 44.62552 47.82328\n [9] 51.02104 54.21880\n\n$xname\n[1] \"xvect\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n\n[[2]]\n$breaks\n [1] 23.84007 27.03783 30.23559 33.43335 36.63111 39.82887 43.02664 46.22440\n [9] 49.42216 52.61992 55.81768\n\n$counts\n [1] 477 745 481 253  67  10   5   0   0   0\n\n$density\n [1] 0.0731568647 0.1142596734 0.0737703395 0.0388022784 0.0102757022\n [6] 0.0015336869 0.0007668434 0.0000000000 0.0000000000 0.0000000000\n\n$mids\n [1] 25.43895 28.63671 31.83447 35.03223 38.22999 41.42775 44.62552 47.82328\n [9] 51.02104 54.21880\n\n$xname\n[1] \"xvect\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n```\n\n\n:::\n:::\n\n\n### Sub-setting by multiple conditions\nIf we want to create a subset based on multiple conditions we can use the ds.Boole function before subsetting. For example, let's say that we want to create a subset of individuals where BMI values are ≥ 25 and adjusted glucose is lower than 6.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.Boole(\n  V1 = \"D$PM_BMI_CONTINUOUS\",\n  V2 = \"25\",\n  Boolean.operator = \">=\",\n  numeric.output = TRUE,\n  newobj = \"BMI.25.plus\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <BMI.25.plus> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<BMI.25.plus> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.Boole(\n  V1 = \"D$LAB_GLUC_ADJUSTED\",\n  V2 = \"6\",\n  Boolean.operator = \"<\",\n  numeric.output = TRUE,\n  newobj = \"GLUC.6.less\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <GLUC.6.less> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<GLUC.6.less> appears valid in all sources\"\n```\n\n\n:::\n:::\n\n\nWe can then use the ds.make function to make a new categorical variable which combines these groups:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?ds.make \n\nds.make(toAssign = \"BMI.25.plus+GLUC.6.less\",\n        newobj = \"BMI.25.plus_GLUC.6.less\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <BMI.25.plus_GLUC.6.less> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<BMI.25.plus_GLUC.6.less> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# If BMI >= 25 and glucose < 6, then BMI.25.plus_GLUC.6.less=2\n# If BMI >= 25 and glucose >= 6, then BMI.25.plus_GLUC.6.less=1\n# If BMI < 25 and glucose < 6, then BMI.25.plus_GLUC.6.less=1\n# If BMI < 25 and glucose >= 6, then BMI.25.plus_GLUC.6.less=0\n\nds.table(rvar= \"BMI.25.plus_GLUC.6.less\",\n         datasources = conns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Data in all studies were valid \n\nStudy 1 :  No errors reported from this study\nStudy 2 :  No errors reported from this study\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$output.list\n$output.list$TABLE_rvar.by.study_row.props\n                       study\nBMI.25.plus_GLUC.6.less    France  ISGlobal\n                     0  0.4215686 0.5784314\n                     1  0.4202509 0.5797491\n                     2  0.3976862 0.6023138\n                     NA 0.4072266 0.5927734\n\n$output.list$TABLE_rvar.by.study_col.props\n                       study\nBMI.25.plus_GLUC.6.less    France  ISGlobal\n                     0  0.1192788 0.1146373\n                     1  0.4336570 0.4190415\n                     2  0.2542765 0.2697539\n                     NA 0.1927878 0.1965674\n\n$output.list$TABLE_rvar.by.study_counts\n                       study\nBMI.25.plus_GLUC.6.less France ISGlobal\n                     0     258      354\n                     1     938     1294\n                     2     550      833\n                     NA    417      607\n\n$output.list$TABLES.COMBINED_all.sources_proportions\nBMI.25.plus_GLUC.6.less\n    0     1     2    NA \n0.117 0.425 0.263 0.195 \n\n$output.list$TABLES.COMBINED_all.sources_counts\nBMI.25.plus_GLUC.6.less\n   0    1    2   NA \n 612 2232 1383 1024 \n\n\n$validity.message\n[1] \"Data in all studies were valid\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.dataFrame(x=c(\"D\", \"BMI.25.plus_GLUC.6.less\"), newobj = \"D2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <D2> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<D2> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.colnames(\"D2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n [1] \"LAB_TSC\"                 \"LAB_TRIG\"               \n [3] \"LAB_HDL\"                 \"LAB_GLUC_ADJUSTED\"      \n [5] \"PM_BMI_CONTINUOUS\"       \"DIS_CVA\"                \n [7] \"MEDI_LPD\"                \"DIS_DIAB\"               \n [9] \"DIS_AMI\"                 \"GENDER\"                 \n[11] \"PM_BMI_CATEGORICAL\"      \"HDL_sqrt\"               \n[13] \"HDL_log\"                 \"BMI.25.plus_GLUC.6.less\"\n\n$ISGlobal\n [1] \"DIS_AMI\"                 \"DIS_CVA\"                \n [3] \"DIS_DIAB\"                \"GENDER\"                 \n [5] \"LAB_GLUC_ADJUSTED\"       \"LAB_HDL\"                \n [7] \"LAB_TRIG\"                \"LAB_TSC\"                \n [9] \"MEDI_LPD\"                \"PM_BMI_CATEGORICAL\"     \n[11] \"PM_BMI_CONTINUOUS\"       \"HDL_sqrt\"               \n[13] \"HDL_log\"                 \"BMI.25.plus_GLUC.6.less\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.dataFrameSubset(df.name = \"D2\",\n  V1.name = \"D2$BMI.25.plus_GLUC.6.less\",\n  V2.name = \"2\",\n  Boolean.operator = \"==\",\n  newobj = \"subset2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <subset2> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<subset2> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.dim(\"subset2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`dimensions of subset2 in France`\n[1] 550  14\n\n$`dimensions of subset2 in ISGlobal`\n[1] 833  14\n\n$`dimensions of subset2 in combined studies`\n[1] 1383   14\n```\n\n\n:::\n:::\n\n\n\n\n## Data manipulation with dsHelper\nAgain, we can use some dsHelper functions to do data manipulation operations in a more efficient way. \n\n### Create a subset of columns by a vector of column names\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndh.dropCols(\n\tdf = \"D\", \n  vars = c(\"PM_BMI_CONTINUOUS\", \"GENDER\"), \n  type = \"keep\",\n  new_obj = \"df_subset\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$is.object.created\n[1] \"A data object <df_subset> has been created in all specified data sources\"\n\n$France$validity.check\n[1] \"<df_subset> appears valid in all sources\"\n\n\n$ISGlobal\n$ISGlobal$is.object.created\n[1] \"A data object <df_subset> has been created in all specified data sources\"\n\n$ISGlobal$validity.check\n[1] \"<df_subset> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.colnames(\"df_subset\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n[1] \"PM_BMI_CONTINUOUS\" \"GENDER\"           \n\n$ISGlobal\n[1] \"GENDER\"            \"PM_BMI_CONTINUOUS\"\n```\n\n\n:::\n:::\n\n\n\n### Rename variables\n\n::: {.cell}\n\n```{.r .cell-code}\ndh.renameVars(\n\tdf = \"D\", \n  current_names = c(\"PM_BMI_CONTINUOUS\", \"GENDER\"),\n  new_names = c(\"bmi\", \"sex\"), \n  new_obj = \"df_rename\")\n  \nds.colnames(\"df_rename\")\n```\n:::\n\n\nThere are many more dsHelper functions designed to make common operations easier in datashield, check out the vignettes at: [https://github.com/timcadman/ds-helper/blob/master/vignettes/ds-helper-main-vignette.Rmd](https://github.com/timcadman/ds-helper/blob/master/vignettes/ds-helper-main-vignette.Rmd)\n\n\n\n################################################################################\n\n## Graphs\n\nVisualising the data we are studying is extremely important to get a sense of it. While it may seem disclosive at first glance, only such graphs that are definitively non-disclosive have been implemented within the DataSHIELD project.\n\n### Histograms\n\nFirstly, histograms give a good sense of how one variable is distributed. But no individual points are disclosed because values are \"binned\" into groups of a similar magnitude, disguising what each one actually is. We protect privacy by removing bins with low counts (below specific threshold). If you have a symmetric distribution, you may find some things aren't observed at the extreme ends.\n\nLet's create a histogram of the variable we've been investigating for much of this study: HDL Cholesterol (\"LAB_HDL\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?ds.histogram\nds.histogram(x='D$LAB_HDL')\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n$breaks\n [1] -0.1483914  0.1779183  0.5042280  0.8305376  1.1568473  1.4831570\n [7]  1.8094667  2.1357764  2.4620861  2.7883958  3.1147055\n\n$counts\n [1]   0  19  55 187 469 560 367 124  18   0\n\n$density\n [1] 0.00000000 0.03229445 0.09348394 0.31784538 0.79716302 0.95183644\n [7] 0.62379281 0.21076378 0.03059474 0.00000000\n\n$mids\n [1] 0.01476342 0.34107311 0.66738280 0.99369249 1.32000218 1.64631187\n [7] 1.97262156 2.29893126 2.62524095 2.95155064\n\n$xname\n[1] \"xvect\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n\n[[2]]\n$breaks\n [1] -0.1483914  0.1779183  0.5042280  0.8305376  1.1568473  1.4831570\n [7]  1.8094667  2.1357764  2.4620861  2.7883958  3.1147055\n\n$counts\n [1]   9  20  87 298 658 768 492 166  31   4\n\n$density\n [1] 0.010888733 0.024197184 0.105257752 0.360538047 0.796087366 0.929171880\n [7] 0.595250736 0.200836630 0.037505636 0.004839437\n\n$mids\n [1] 0.01476342 0.34107311 0.66738280 0.99369249 1.32000218 1.64631187\n [7] 1.97262156 2.29893126 2.62524095 2.95155064\n\n$xname\n[1] \"xvect\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n```\n\n\n:::\n:::\n\n\n**Use the ds.histogram to explore the distribution of \"D$PM_BMI_CONTINUOUS\"**\n\n### Scatterplots of two numerical variables\n\nWhen you generate a scatter plot, you can say that the data points that are displayed are not the actual values. The function gives you the choice on how to anonymise: either you anonymise the values by additional random noise; or you take the average of the k nearest neighbours. (for more details on how anonymisation methods are used for the generation of privacy-preserving visualisations you can have a look on the paper https://epjdatascience.springeropen.com/articles/10.1140/epjds/s13688-020-00257-4)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.scatterPlot(x=\"D$LAB_HDL\", y=\"D$PM_BMI_CONTINUOUS\")\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Split plot created\"\n```\n\n\n:::\n:::\n\n\nOther DataSHIELD graphical functions allow the creation of box plots, heatmap plots and contour plots. Investigate them using their help functions:\n\n::: {.cell}\n\n```{.r .cell-code}\n?ds.heatmapPlot\n?ds.contourPlot\n?ds.boxPlot\n```\n:::\n\n\n\n################################################################################\n\n\n## Analysis\n\n### Simple Linear Regression\n\nWe want to examine the relationship between BMI and HDL Cholesterol\n\n::: {.cell}\n\n```{.r .cell-code}\nds.cor(x='D$PM_BMI_CONTINUOUS', y='D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$`Number of missing values in each variable`\n     x.val y.val\n[1,]    97   360\n\n$France$`Number of missing values casewise`\n      x.val y.val\nx.val   431   431\ny.val   431   431\n\n$France$`Correlation Matrix`\n           [,1]       [,2]\n[1,]  1.0000000 -0.1245574\n[2,] -0.1245574  1.0000000\n\n$France$`Number of complete cases used`\n      x.val y.val\nx.val  1732  1732\ny.val  1732  1732\n\n\n$ISGlobal\n$ISGlobal$`Number of missing values in each variable`\n     x.val y.val\n[1,]   150   555\n\n$ISGlobal$`Number of missing values casewise`\n      x.val y.val\nx.val   656   656\ny.val   656   656\n\n$ISGlobal$`Correlation Matrix`\n           [,1]       [,2]\n[1,]  1.0000000 -0.1408146\n[2,] -0.1408146  1.0000000\n\n$ISGlobal$`Number of complete cases used`\n      x.val y.val\nx.val  2432  2432\ny.val  2432  2432\n```\n\n\n:::\n:::\n\n\n \n\nRegress HDL Cholesterol with BMI using the Individual Partition Data (IPD) approach:\n\n \n\nThe method for this (ds.glm) is a \"pooled analysis\"- equivalent to placing the individual-level data from all sources in one warehouse.\n\n \n\nImportant to note that the link function is by default the canonical link function for each family. So binomial <-> logistic link, poisson <-> log link, gaussian <-> identity link.\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.glm(formula = \"D$LAB_HDL~D$PM_BMI_CONTINUOUS\", \n       family=\"gaussian\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Nvalid\n[1] 4164\n\n$Nmissing\n[1] 1087\n\n$Ntotal\n[1] 5251\n\n$disclosure.risk\n         RISK OF DISCLOSURE\nFrance                    0\nISGlobal                  0\n\n$errorMessage\n         ERROR MESSAGES\nFrance   \"No errors\"   \nISGlobal \"No errors\"   \n\n$nsubs\n[1] 4164\n\n$iter\n[1] 3\n\n$family\n\nFamily: gaussian \nLink function: identity \n\n\n$formula\n[1] \"D$LAB_HDL ~ D$PM_BMI_CONTINUOUS\"\n\n$coefficients\n                       Estimate  Std. Error   z-value      p-value   low0.95CI\n(Intercept)          1.88135842 0.036929493 50.944604 0.000000e+00  1.80897794\nD$PM_BMI_CONTINUOUS -0.01158759 0.001326689 -8.734224 2.453351e-18 -0.01418786\n                      high0.95CI\n(Intercept)          1.953738898\nD$PM_BMI_CONTINUOUS -0.008987333\n\n$dev\n[1] 714.4256\n\n$df\n[1] 4162\n\n$output.information\n[1] \"SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES\"\n```\n\n\n:::\n:::\n\n\n \n\n\nRegress HDL Cholesterol with BMI using the Study-Level Meta-Analysis (SLMA) approach:\n\n::: {.cell}\n\n```{.r .cell-code}\nds.glmSLMA(formula = \"D$LAB_HDL~D$PM_BMI_CONTINUOUS\", family=\"gaussian\", \n           newobj = \"workshop.obj\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$output.summary\n$output.summary$study1\n$output.summary$study1$rank\n[1] 2\n\n$output.summary$study1$aic\n[1] 1823.266\n\n$output.summary$study1$iter\n[1] 2\n\n$output.summary$study1$converged\n[1] TRUE\n\n$output.summary$study1$boundary\n[1] FALSE\n\n$output.summary$study1$na.action\n$output.summary$study1$na.action$na.action\n[1] \"na.omit\"\n\n\n$output.summary$study1$call\nglm(formula = formula, family = gaussian, x = TRUE)\n\n$output.summary$study1$terms\nD$LAB_HDL ~ D$PM_BMI_CONTINUOUS\nattr(,\"variables\")\nlist(D$LAB_HDL, D$PM_BMI_CONTINUOUS)\nattr(,\"factors\")\n                    D$PM_BMI_CONTINUOUS\nD$LAB_HDL                             0\nD$PM_BMI_CONTINUOUS                   1\nattr(,\"term.labels\")\n[1] \"D$PM_BMI_CONTINUOUS\"\nattr(,\"order\")\n[1] 1\nattr(,\"intercept\")\n[1] 1\nattr(,\"response\")\n[1] 1\nattr(,\".Environment\")\n<environment: R_GlobalEnv>\nattr(,\"predvars\")\nlist(D$LAB_HDL, D$PM_BMI_CONTINUOUS)\nattr(,\"dataClasses\")\n          D$LAB_HDL D$PM_BMI_CONTINUOUS \n          \"numeric\"           \"numeric\" \n\n$output.summary$study1$contrasts\nNULL\n\n$output.summary$study1$aliased\n        (Intercept) D$PM_BMI_CONTINUOUS \n              FALSE               FALSE \n\n$output.summary$study1$dispersion\n[1] 0.1673794\n\n$output.summary$study1$data\nNULL\n\n$output.summary$study1$df\n[1]    2 1730    2\n\n$output.summary$study1$Ntotal\n[1] 2163\n\n$output.summary$study1$Nvalid\n[1] 1732\n\n$output.summary$study1$Nmissing\n[1] 431\n\n$output.summary$study1$cov.unscaled\n                      (Intercept) D$PM_BMI_CONTINUOUS\n(Intercept)          0.0188122406       -6.660371e-04\nD$PM_BMI_CONTINUOUS -0.0006660371        2.432731e-05\n\n$output.summary$study1$cov.scaled\n                      (Intercept) D$PM_BMI_CONTINUOUS\n(Intercept)          0.0031487822       -1.114809e-04\nD$PM_BMI_CONTINUOUS -0.0001114809        4.071892e-06\n\n$output.summary$study1$offset\nNULL\n\n$output.summary$study1$weights\nNULL\n\n$output.summary$study1$VarCovMatrix\n                      (Intercept) D$PM_BMI_CONTINUOUS\n(Intercept)          0.0031487822       -1.114809e-04\nD$PM_BMI_CONTINUOUS -0.0001114809        4.071892e-06\n\n$output.summary$study1$CorrMatrix\n           [,1]       [,2]\n[1,]  1.0000000 -0.9845349\n[2,] -0.9845349  1.0000000\n\n$output.summary$study1$deviance.null\n[1] 294.1297\n\n$output.summary$study1$df.null\n[1] 1731\n\n$output.summary$study1$deviance.resid\n[1] 289.5664\n\n$output.summary$study1$df.resid\n[1] 1730\n\n$output.summary$study1$formula\nD$LAB_HDL ~ D$PM_BMI_CONTINUOUS\n\n$output.summary$study1$family\n\nFamily: gaussian \nLink function: identity \n\n\n$output.summary$study1$coefficients\n                       Estimate  Std. Error   t value      Pr(>|t|)\n(Intercept)          1.86092195 0.056114010 33.163232 4.254496e-187\nD$PM_BMI_CONTINUOUS -0.01053625 0.002017893 -5.221413  1.990047e-07\n\n\n$output.summary$study2\n$output.summary$study2$rank\n[1] 2\n\n$output.summary$study2$aic\n[1] 2662.953\n\n$output.summary$study2$iter\n[1] 2\n\n$output.summary$study2$converged\n[1] TRUE\n\n$output.summary$study2$boundary\n[1] FALSE\n\n$output.summary$study2$na.action\n$output.summary$study2$na.action$na.action\n[1] \"na.omit\"\n\n\n$output.summary$study2$call\nglm(formula = formula, family = gaussian, x = TRUE)\n\n$output.summary$study2$terms\nD$LAB_HDL ~ D$PM_BMI_CONTINUOUS\nattr(,\"variables\")\nlist(D$LAB_HDL, D$PM_BMI_CONTINUOUS)\nattr(,\"factors\")\n                    D$PM_BMI_CONTINUOUS\nD$LAB_HDL                             0\nD$PM_BMI_CONTINUOUS                   1\nattr(,\"term.labels\")\n[1] \"D$PM_BMI_CONTINUOUS\"\nattr(,\"order\")\n[1] 1\nattr(,\"intercept\")\n[1] 1\nattr(,\"response\")\n[1] 1\nattr(,\".Environment\")\n<environment: R_GlobalEnv>\nattr(,\"predvars\")\nlist(D$LAB_HDL, D$PM_BMI_CONTINUOUS)\nattr(,\"dataClasses\")\n          D$LAB_HDL D$PM_BMI_CONTINUOUS \n          \"numeric\"           \"numeric\" \n\n$output.summary$study2$contrasts\nNULL\n\n$output.summary$study2$aliased\n        (Intercept) D$PM_BMI_CONTINUOUS \n              FALSE               FALSE \n\n$output.summary$study2$dispersion\n[1] 0.1747223\n\n$output.summary$study2$data\nNULL\n\n$output.summary$study2$df\n[1]    2 2430    2\n\n$output.summary$study2$Ntotal\n[1] 3088\n\n$output.summary$study2$Nvalid\n[1] 2432\n\n$output.summary$study2$Nmissing\n[1] 656\n\n$output.summary$study2$cov.unscaled\n                      (Intercept) D$PM_BMI_CONTINUOUS\n(Intercept)          0.0137537512       -4.863169e-04\nD$PM_BMI_CONTINUOUS -0.0004863169        1.772554e-05\n\n$output.summary$study2$cov.scaled\n                      (Intercept) D$PM_BMI_CONTINUOUS\n(Intercept)          2.403088e-03       -8.497043e-05\nD$PM_BMI_CONTINUOUS -8.497043e-05        3.097047e-06\n\n$output.summary$study2$offset\nNULL\n\n$output.summary$study2$weights\nNULL\n\n$output.summary$study2$VarCovMatrix\n                      (Intercept) D$PM_BMI_CONTINUOUS\n(Intercept)          2.403088e-03       -8.497043e-05\nD$PM_BMI_CONTINUOUS -8.497043e-05        3.097047e-06\n\n$output.summary$study2$CorrMatrix\n           [,1]       [,2]\n[1,]  1.0000000 -0.9849385\n[2,] -0.9849385  1.0000000\n\n$output.summary$study2$deviance.null\n[1] 433.1644\n\n$output.summary$study2$df.null\n[1] 2431\n\n$output.summary$study2$deviance.resid\n[1] 424.5753\n\n$output.summary$study2$df.resid\n[1] 2430\n\n$output.summary$study2$formula\nD$LAB_HDL ~ D$PM_BMI_CONTINUOUS\n\n$output.summary$study2$family\n\nFamily: gaussian \nLink function: identity \n\n\n$output.summary$study2$coefficients\n                       Estimate  Std. Error   t value      Pr(>|t|)\n(Intercept)          1.89602432 0.049021297 38.677563 1.934321e-255\nD$PM_BMI_CONTINUOUS -0.01233882 0.001759843 -7.011321  3.047241e-12\n\n\n$output.summary$input.beta.matrix.for.SLMA\n                    betas study 1 betas study 2\n(Intercept)            1.86092195    1.89602432\nD$PM_BMI_CONTINUOUS   -0.01053625   -0.01233882\n\n$output.summary$input.se.matrix.for.SLMA\n                    ses study 1 ses study 2\n(Intercept)         0.056114010 0.049021297\nD$PM_BMI_CONTINUOUS 0.002017893 0.001759843\n\n\n$num.valid.studies\n[1] 2\n\n$betamatrix.all\n                    betas study 1 betas study 2\n(Intercept)            1.86092195    1.89602432\nD$PM_BMI_CONTINUOUS   -0.01053625   -0.01233882\n\n$sematrix.all\n                    ses study 1 ses study 2\n(Intercept)         0.056114010 0.049021297\nD$PM_BMI_CONTINUOUS 0.002017893 0.001759843\n\n$betamatrix.valid\n                    betas study 1 betas study 2\n(Intercept)            1.86092195    1.89602432\nD$PM_BMI_CONTINUOUS   -0.01053625   -0.01233882\n\n$sematrix.valid\n                    ses study 1 ses study 2\n(Intercept)         0.056114010 0.049021297\nD$PM_BMI_CONTINUOUS 0.002017893 0.001759843\n\n$SLMA.pooled.ests.matrix\n                     pooled.ML       se.ML pooled.REML     se.REML  pooled.FE\n(Intercept)          1.8808305 0.036917856   1.8808305 0.036917856  1.8808305\nD$PM_BMI_CONTINUOUS -0.0115601 0.001326309  -0.0115601 0.001326309 -0.0115601\n                          se.FE\n(Intercept)         0.036917856\nD$PM_BMI_CONTINUOUS 0.001326309\n\n$is.object.created\n[1] \"A data object <workshop.obj> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<workshop.obj> appears valid in all sources\"\n```\n\n\n:::\n:::\n\n\n \n\nFor the SLMA approach we can assign the predicted values at each study:\n\n::: {.cell}\n\n```{.r .cell-code}\nds.glmPredict(glmname = \"workshop.obj\", newobj = \"workshop.prediction.obj\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n$France$safe.list\n$France$safe.list$glm.object\n[1] \"workshop.obj\"\n\n$France$safe.list$newdfname\nNULL\n\n$France$safe.list$output.type\n[1] \"response\"\n\n$France$safe.list$dispersion\nNULL\n\n$France$safe.list$fit.Ntotal\n[1] 1732\n\n$France$safe.list$fit.Nvalid\n[1] 1732\n\n$France$safe.list$fit.Nmiss\n[1] 0\n\n$France$safe.list$fit.mean\n[1] 1.572459\n\n$France$safe.list$fit.sd\n[1] 0.2265924\n\n$France$safe.list$fit.quantiles\n      5%      10%      25%      50%      75%      90%      95% \n1.488919 1.505439 1.538276 1.572387 1.605839 1.637659 1.655455 \n\n\n\n$ISGlobal\n$ISGlobal$safe.list\n$ISGlobal$safe.list$glm.object\n[1] \"workshop.obj\"\n\n$ISGlobal$safe.list$newdfname\nNULL\n\n$ISGlobal$safe.list$output.type\n[1] \"response\"\n\n$ISGlobal$safe.list$dispersion\nNULL\n\n$ISGlobal$safe.list$fit.Ntotal\n[1] 2432\n\n$ISGlobal$safe.list$fit.Nvalid\n[1] 2432\n\n$ISGlobal$safe.list$fit.Nmiss\n[1] 0\n\n$ISGlobal$safe.list$fit.mean\n[1] 1.557497\n\n$ISGlobal$safe.list$fit.sd\n[1] 0.243804\n\n$ISGlobal$safe.list$fit.quantiles\n      5%      10%      25%      50%      75%      90%      95% \n1.460655 1.481193 1.518580 1.557941 1.596839 1.633442 1.655954 \n```\n\n\n:::\n\n```{.r .cell-code}\nds.length(\"workshop.prediction.obj$fit\", datasources=conns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`length of workshop.prediction.obj$fit in France`\n[1] 1732\n\n$`length of workshop.prediction.obj$fit in ISGlobal`\n[1] 2432\n\n$`total length of workshop.prediction.obj$fit in all studies combined`\n[1] 4164\n```\n\n\n:::\n\n```{.r .cell-code}\nds.length(\"D$LAB_HDL\", datasources=conns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`length of D$LAB_HDL in France`\n[1] 2163\n\n$`length of D$LAB_HDL in ISGlobal`\n[1] 3088\n\n$`total length of D$LAB_HDL in all studies combined`\n[1] 5251\n```\n\n\n:::\n:::\n\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.cbind(c('D$LAB_HDL', 'D$PM_BMI_CONTINUOUS'), newobj='vars')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <vars> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<vars> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.completeCases('vars', newobj='vars.complete')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <vars.complete> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<vars.complete> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.dim('vars.complete')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`dimensions of vars.complete in France`\n[1] 1732    2\n\n$`dimensions of vars.complete in ISGlobal`\n[1] 2432    2\n\n$`dimensions of vars.complete in combined studies`\n[1] 4164    2\n```\n\n\n:::\n:::\n\n\n\nLet's plot the best linear fit on a scatter plot\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- ds.scatterPlot('D$PM_BMI_CONTINUOUS', \"D$LAB_HDL\", return.coords = TRUE)\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndf2 <- ds.scatterPlot('vars.complete$PM_BMI_CONTINUOUS', \"workshop.prediction.obj$fit\", \n                      return.coords = TRUE)\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-39-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# then in native R\npar(mfrow=c(2,2))\nplot(as.data.frame(df1[[1]][[1]])$x,\n     as.data.frame(df1[[1]][[1]])$y, xlab='Body Mass Index', ylab='HDL Cholesterol', main='Study 1')\nlines(as.data.frame(df2[[1]][[1]])$x,as.data.frame(df2[[1]][[1]])$y, col='red')\nplot(as.data.frame(df1[[1]][[2]])$x,as.data.frame(df1[[1]][[2]])$y, \n     xlab='Body Mass Index', ylab='HDL Cholesterol', main='Study 2')\nlines(as.data.frame(df2[[1]][[2]])$x,as.data.frame(df2[[1]][[2]])$y, col='red')\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-39-3.png){width=672}\n:::\n:::\n\n\n\nFor the SLMA approach we can also create the predicted values and the residuals at each study using the ds.make function:\n\n::: {.cell}\n\n```{.r .cell-code}\nglmslma <- ds.glmSLMA(formula = \"vars.complete$LAB_HDL~vars.complete$PM_BMI_CONTINUOUS\", family=\"gaussian\", newobj = \"workshop.obj\")\n\nds.make(toAssign=paste0(\"(\",glmslma$SLMA.pooled.ests.matrix[1,1],\")+(\", glmslma$SLMA.pooled.ests.matrix[2,1],\"*vars.complete$PM_BMI_CONTINUOUS)\"), \n        newobj = \"predicted.values\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <predicted.values> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<predicted.values> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.make(toAssign = \"vars.complete$LAB_HDL - predicted.values\", \n        newobj = \"residuals\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$is.object.created\n[1] \"A data object <residuals> has been created in all specified data sources\"\n\n$validity.check\n[1] \"<residuals> appears valid in all sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# and you can use those to run regression plot diagnostics  \nds.scatterPlot('predicted.values', \"residuals\")\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Split plot created\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.histogram(\"residuals\")\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-40-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n$breaks\n [1] -1.6402381 -1.3328854 -1.0255327 -0.7181800 -0.4108273 -0.1034746\n [7]  0.2038781  0.5112308  0.8185835  1.1259362  1.4332889\n\n$counts\n [1]   4  20  53 171 410 513 380 146  30   5\n\n$density\n [1] 0.007514067 0.037570335 0.099561388 0.321226365 0.770191869 0.963679095\n [7] 0.713836367 0.274263446 0.056355503 0.009392584\n\n$mids\n [1] -1.48656178 -1.17920907 -0.87185637 -0.56450366 -0.25715096  0.05020175\n [7]  0.35755445  0.66490716  0.97225986  1.27961257\n\n$xname\n[1] \"xvect\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n\n[[2]]\n$breaks\n [1] -1.6402381 -1.3328854 -1.0255327 -0.7181800 -0.4108273 -0.1034746\n [7]  0.2038781  0.5112308  0.8185835  1.1259362  1.4332889\n\n$counts\n [1]   7  19  85 274 585 715 502 191  47   7\n\n$density\n [1] 0.009364777 0.025418680 0.113715147 0.366564120 0.782627774 0.956545057\n [7] 0.671588278 0.255524624 0.062877787 0.009364777\n\n$mids\n [1] -1.48656178 -1.17920907 -0.87185637 -0.56450366 -0.25715096  0.05020175\n [7]  0.35755445  0.66490716  0.97225986  1.27961257\n\n$xname\n[1] \"xvect\"\n\n$equidist\n[1] TRUE\n\nattr(,\"class\")\n[1] \"histogram\"\n```\n\n\n:::\n:::\n\n\n\n### Creating forest plots\n\nWe want to examine the relationship between BMI and diabetes\n\nExamine the distribution of the variable \"DIS_DIAB\" in all cohorts using 'ds.table':\n\n\n::: {.cell}\n\n```{.r .cell-code}\nds.table(\"D$DIS_DIAB\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Data in all studies were valid \n\nStudy 1 :  No errors reported from this study\nStudy 2 :  No errors reported from this study\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$output.list\n$output.list$TABLE_rvar.by.study_row.props\n          study\nD$DIS_DIAB    France  ISGlobal\n        0  0.4122536 0.5877464\n        1  0.3896104 0.6103896\n        NA       NaN       NaN\n\n$output.list$TABLE_rvar.by.study_col.props\n          study\nD$DIS_DIAB     France   ISGlobal\n        0  0.98613037 0.98477979\n        1  0.01386963 0.01522021\n        NA 0.00000000 0.00000000\n\n$output.list$TABLE_rvar.by.study_counts\n          study\nD$DIS_DIAB France ISGlobal\n        0    2133     3041\n        1      30       47\n        NA      0        0\n\n$output.list$TABLES.COMBINED_all.sources_proportions\nD$DIS_DIAB\n     0      1     NA \n0.9850 0.0147 0.0000 \n\n$output.list$TABLES.COMBINED_all.sources_counts\nD$DIS_DIAB\n   0    1   NA \n5174   77    0 \n\n\n$validity.message\n[1] \"Data in all studies were valid\"\n```\n\n\n:::\n:::\n\n\n\nCheck the class of \"DIS_DIAB\":\n\n::: {.cell}\n\n```{.r .cell-code}\nds.class(\"D$DIS_DIAB\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$France\n[1] \"factor\"\n\n$ISGlobal\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\nExamine the association between BMI and diabetes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglmSLMA_mod2<-ds.glmSLMA(formula=\"D$DIS_DIAB~D$PM_BMI_CONTINUOUS\", family='binomial')\n```\n:::\n\n\n\nSave effect estimates and standard errors as new objects\n\n::: {.cell}\n\n```{.r .cell-code}\nestimates <- c(glmSLMA_mod2$betamatrix.valid[2,])\nse <- c(glmSLMA_mod2$sematrix.valid[2,])\n```\n:::\n\n\n\nMeta-analyse the results using rma to obtain study weights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- rma(estimates, sei=se)\n```\n:::\n\n\n\nCan produce simple forest plots using output:\n\n::: {.cell}\n\n```{.r .cell-code}\nforest(res, atransf=exp)\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\nWe can also add more information to forest plots:\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy_names <- c(\"France\", \"Spain\")\nweights <-  c(paste0(formatC(weights(res), format=\"f\", digits=1, width=4), \"%\"))\n\nforest(res, atransf=exp,\n       xlab=\"Crude Odds Ratio\", refline=log(1), xlim=c(-0.25,0.5), \n       at=log(c(0.95, 1, 1.1, 1.2, 1.3)),\n       slab=cbind(paste0(study_names, \" (\", paste0(weights, \")\"))), \n       mlab=\"RE model\")\ntext(0.5, 4.5, pos=2, \"Odds Ratio [95% CI]\")\ntext(-0.25, 4.5, pos=4, \"Study (weight)\")\n```\n\n::: {.cell-output-display}\n![](datashield_tables_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n### Modelling multiple variables and interactions\n\n \n\nAlso possible to model multiple explanatory variables and include interactions: \n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_mod1<-ds.glm(formula=\"D$DIS_DIAB~D$PM_BMI_CONTINUOUS+D$LAB_HDL*D$GENDER\", family='binomial')\n```\n:::\n\nThe \"*\" between LAB_HDL and GENDER means fit all possible main effects and interactions between the two covariates.\n\n \n\nCompare with results of a study-level meta analysis:\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglmSLMA_mod2<-ds.glmSLMA(formula=\"D$DIS_DIAB~D$PM_BMI_CONTINUOUS+D$LAB_HDL*D$GENDER\", family='binomial')\n```\n:::\n\nNow compare outputs:\n\n \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_mod1$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      Estimate Std. Error    z-value      p-value low0.95CI.LP\n(Intercept)         -6.9064142 1.08980103 -6.3373166 2.338013e-10  -9.04238494\nD$PM_BMI_CONTINUOUS  0.1422563 0.02932171  4.8515676 1.224894e-06   0.08478676\nD$LAB_HDL           -0.9674407 0.36306348 -2.6646601 7.706618e-03  -1.67903208\nD$GENDER1           -1.4094527 1.06921103 -1.3182175 1.874308e-01  -3.50506784\nD$LAB_HDL:D$GENDER1  0.6460071 0.69410419  0.9307062 3.520056e-01  -0.71441214\n                    high0.95CI.LP       P_OR low0.95CI.P_OR high0.95CI.P_OR\n(Intercept)            -4.7704434 0.00100034   0.0001182744     0.008405372\nD$PM_BMI_CONTINUOUS     0.1997257 1.15287204   1.0884849336     1.221067831\nD$LAB_HDL              -0.2558494 0.38005445   0.1865544594     0.774258560\nD$GENDER1               0.6861624 0.24427693   0.0300447352     1.986079051\nD$LAB_HDL:D$GENDER1     2.0064263 1.90790747   0.4894797709     7.436693232\n```\n\n\n:::\n\n```{.r .cell-code}\nglmSLMA_mod2$SLMA.pooled.ests.matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     pooled.ML      se.ML pooled.REML    se.REML  pooled.FE\n(Intercept)         -6.9801281 1.10288774  -6.9801281 1.10288774 -6.9801281\nD$PM_BMI_CONTINUOUS  0.1416310 0.02966509   0.1414987 0.03541024  0.1416315\nD$LAB_HDL           -0.9596916 0.36419284  -0.9596916 0.36419284 -0.9596916\nD$GENDER1           -1.3700137 1.08123151  -1.3700137 1.08123151 -1.3700137\nD$LAB_HDL:D$GENDER1  0.6277591 0.69958422   0.6277591 0.69958422  0.6277591\n                         se.FE\n(Intercept)         1.10288774\nD$PM_BMI_CONTINUOUS 0.02964695\nD$LAB_HDL           0.36419284\nD$GENDER1           1.08123151\nD$LAB_HDL:D$GENDER1 0.69958422\n```\n\n\n:::\n:::\n\n\nSimilar, but differences between the results are accounted for by the different techniques employed.\n\n\n## At the end of your RStudio Server analysis:\n\nYou can save your workspace:\n\n::: {.cell}\n\n```{.r .cell-code}\ndatashield.workspace_save(conns = conns, ws = \"workspace2025\")\n```\n:::\n\n\nDon't forget to log out! Using:\n\n::: {.cell}\n\n```{.r .cell-code}\ndatashield.logout(conns)\n```\n:::\n\n\n\nYou can restore your workspace, the next time you want to continue with your analysis\n\n::: {.cell}\n\n```{.r .cell-code}\nconns <- datashield.login(logins = logindata, \n                          assign = TRUE, symbol = \"D\")\nds.ls()\ndatashield.logout(conns)\n\nconns <- datashield.login(logins = logindata, restore = \"workspace2025\")\nds.ls()\n```\n:::\n\n\nAlso you can delete unwanted workspaces using the datashield.workspace_rm\n\nIn Rstudio Server: DON'T forget to use the orange \"quit the current R session\" button (top right of browser screen) before closing the tab- otherwise you will experience an error message the next time you try to log in.\n\n# Meta-analysis\n\nThe following script describes how to perform a meta-analysis of data from three different Opal servers:\n\n<a href=\"#\" onclick=\"event.preventDefault(); fetch('https://raw.githubusercontent.com/isglobal-brge/workshop_DSWB/main/meta_analysis.R').then(response => response.blob()).then(blob => { const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.style.display = 'none'; a.href = url; a.download = 'meta_analysis.R'; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); }); return false;\" class=\"btn btn-primary btn-sm\">\n<i class=\"bi bi-download\"></i> Download the meta-analysis script \n</a>\n\n# Exercise\n\n\nWe have access to 2 datasets corresponding to simulated data from [UKBiobank](https://www.ukbiobank.ac.uk/) available through [CINECA study](https://ega-archive.org/datasets/EGAD00001006673). This data reproduce the exact associations found at UKBiobank. The two datasets are accessed in two Opal server\n\nServer 1:  \n- URL: https://opal-demo.obiba.org/ (user: administrator, pwd: password)  \n- Project: GWAS  \n- Table: ega_phenotypes_1  \n\nServer 2:  \n- URL: https://opal.isglobal.org/repo (user: invited, pwd: 12345678Aa@)  \n- Project: EGA  \n- Table: ega_phenotypes_2  \n  \n\nThen, load the tables in R as data.frame’s using the functions available in the DSI library and answer the next questions using the  functions available at dsBaseClient package. \n\n\n- Check that your loaded objects are of class data.frame\n- How many individuals have been diagnosed with diabetes by doctor (variable - diabetes_diagnosed_doctor)?\n- Obtain the same information stratified by sex (Hint: create a 2x2 table).\n- Create an histogram of the variable height by combining information across the different datasets (Hint: type ?ds.histogram to see how to get this plot).\n- Create a correlation plot between bmi and weight combining data from the studies (Hint: ?ds.scatterPlot).\n- Compute the correlation between bmiand weight.\n- Fit a regression model between cholesterol and weight.\n- Fit a regression model between diabetes (variable diabetes_diagnosed_doctor) and colesterol level (variable cholesterol). Note: remember that outcome variable (e.g. diabetes) must be a factor variable.\n- Fit the same model adjusted by bmi. Is still cholesterol associated with diabetes?\n- Is there any interaction between cholesterol and sex adjusted by bmi?\n\n<a href=\"#\" onclick=\"event.preventDefault(); fetch('https://raw.githubusercontent.com/isglobal-brge/workshop_DSWB/main/Exercise_tables.R').then(response => response.blob()).then(blob => { const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.style.display = 'none'; a.href = url; a.download = 'Exercise_tables.R'; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); }); return false;\" class=\"btn btn-primary btn-sm\">\n<i class=\"bi bi-download\"></i> Download the solution\n</a>\n\n# Exercise: UKBiobank Meta-Analysis\n\nWe have access to 3 datasets corresponding to simulated data from UKBiobank available through CINECA study. This data reproduce the exact associations found at UKBiobank. The datasets are accessed in three Opal servers:\n\n**Server 1:**\n\n- URL: https://opal-demo.obiba.org/ (user: administrator, pwd: password)\n- Project: GWAS\n- Table: ega_phenotypes_1\n\n**Server 2:**\n\n- URL: https://opal-demo.obiba.org/ (user: administrator, pwd: password)\n- Project: GWAS\n- Table: ega_phenotypes_2\n\n**Server 3:**\n\n- URL: https://opal-demo.obiba.org/ (user: administrator, pwd: password)\n- Project: GWAS\n- Table: ega_phenotypes_3\n\nFit a regression model between diabetes (variable diabetes_diagnosed_doctor) and cholesterol level (variable cholesterol) using meta-analysis approach and compute the pooled effect.",
    "supporting": [
      "datashield_tables_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}